// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dreddsa5dies/httprestapient/ent/matrixattack"
)

// MatrixAttackCreate is the builder for creating a MatrixAttack entity.
type MatrixAttackCreate struct {
	config
	mutation *MatrixAttackMutation
	hooks    []Hook
}

// SetIdMatrix sets the "IdMatrix" field.
func (mac *MatrixAttackCreate) SetIdMatrix(s string) *MatrixAttackCreate {
	mac.mutation.SetIdMatrix(s)
	return mac
}

// SetVendorName sets the "VendorName" field.
func (mac *MatrixAttackCreate) SetVendorName(s string) *MatrixAttackCreate {
	mac.mutation.SetVendorName(s)
	return mac
}

// SetNillableVendorName sets the "VendorName" field if the given value is not nil.
func (mac *MatrixAttackCreate) SetNillableVendorName(s *string) *MatrixAttackCreate {
	if s != nil {
		mac.SetVendorName(*s)
	}
	return mac
}

// SetNameMatrix sets the "NameMatrix" field.
func (mac *MatrixAttackCreate) SetNameMatrix(s string) *MatrixAttackCreate {
	mac.mutation.SetNameMatrix(s)
	return mac
}

// SetNillableNameMatrix sets the "NameMatrix" field if the given value is not nil.
func (mac *MatrixAttackCreate) SetNillableNameMatrix(s *string) *MatrixAttackCreate {
	if s != nil {
		mac.SetNameMatrix(*s)
	}
	return mac
}

// SetVersionMatrix sets the "VersionMatrix" field.
func (mac *MatrixAttackCreate) SetVersionMatrix(s string) *MatrixAttackCreate {
	mac.mutation.SetVersionMatrix(s)
	return mac
}

// SetNillableVersionMatrix sets the "VersionMatrix" field if the given value is not nil.
func (mac *MatrixAttackCreate) SetNillableVersionMatrix(s *string) *MatrixAttackCreate {
	if s != nil {
		mac.SetVersionMatrix(*s)
	}
	return mac
}

// SetCreateDate sets the "CreateDate" field.
func (mac *MatrixAttackCreate) SetCreateDate(t time.Time) *MatrixAttackCreate {
	mac.mutation.SetCreateDate(t)
	return mac
}

// SetNillableCreateDate sets the "CreateDate" field if the given value is not nil.
func (mac *MatrixAttackCreate) SetNillableCreateDate(t *time.Time) *MatrixAttackCreate {
	if t != nil {
		mac.SetCreateDate(*t)
	}
	return mac
}

// SetModifyDate sets the "ModifyDate" field.
func (mac *MatrixAttackCreate) SetModifyDate(t time.Time) *MatrixAttackCreate {
	mac.mutation.SetModifyDate(t)
	return mac
}

// SetNillableModifyDate sets the "ModifyDate" field if the given value is not nil.
func (mac *MatrixAttackCreate) SetNillableModifyDate(t *time.Time) *MatrixAttackCreate {
	if t != nil {
		mac.SetModifyDate(*t)
	}
	return mac
}

// Mutation returns the MatrixAttackMutation object of the builder.
func (mac *MatrixAttackCreate) Mutation() *MatrixAttackMutation {
	return mac.mutation
}

// Save creates the MatrixAttack in the database.
func (mac *MatrixAttackCreate) Save(ctx context.Context) (*MatrixAttack, error) {
	var (
		err  error
		node *MatrixAttack
	)
	mac.defaults()
	if len(mac.hooks) == 0 {
		if err = mac.check(); err != nil {
			return nil, err
		}
		node, err = mac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MatrixAttackMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mac.check(); err != nil {
				return nil, err
			}
			mac.mutation = mutation
			if node, err = mac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(mac.hooks) - 1; i >= 0; i-- {
			if mac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mac *MatrixAttackCreate) SaveX(ctx context.Context) *MatrixAttack {
	v, err := mac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mac *MatrixAttackCreate) Exec(ctx context.Context) error {
	_, err := mac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mac *MatrixAttackCreate) ExecX(ctx context.Context) {
	if err := mac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mac *MatrixAttackCreate) defaults() {
	if _, ok := mac.mutation.VendorName(); !ok {
		v := matrixattack.DefaultVendorName
		mac.mutation.SetVendorName(v)
	}
	if _, ok := mac.mutation.NameMatrix(); !ok {
		v := matrixattack.DefaultNameMatrix
		mac.mutation.SetNameMatrix(v)
	}
	if _, ok := mac.mutation.VersionMatrix(); !ok {
		v := matrixattack.DefaultVersionMatrix
		mac.mutation.SetVersionMatrix(v)
	}
	if _, ok := mac.mutation.CreateDate(); !ok {
		v := matrixattack.DefaultCreateDate()
		mac.mutation.SetCreateDate(v)
	}
	if _, ok := mac.mutation.ModifyDate(); !ok {
		v := matrixattack.DefaultModifyDate()
		mac.mutation.SetModifyDate(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mac *MatrixAttackCreate) check() error {
	if _, ok := mac.mutation.IdMatrix(); !ok {
		return &ValidationError{Name: "IdMatrix", err: errors.New(`ent: missing required field "MatrixAttack.IdMatrix"`)}
	}
	if _, ok := mac.mutation.VendorName(); !ok {
		return &ValidationError{Name: "VendorName", err: errors.New(`ent: missing required field "MatrixAttack.VendorName"`)}
	}
	if _, ok := mac.mutation.NameMatrix(); !ok {
		return &ValidationError{Name: "NameMatrix", err: errors.New(`ent: missing required field "MatrixAttack.NameMatrix"`)}
	}
	if _, ok := mac.mutation.VersionMatrix(); !ok {
		return &ValidationError{Name: "VersionMatrix", err: errors.New(`ent: missing required field "MatrixAttack.VersionMatrix"`)}
	}
	if _, ok := mac.mutation.CreateDate(); !ok {
		return &ValidationError{Name: "CreateDate", err: errors.New(`ent: missing required field "MatrixAttack.CreateDate"`)}
	}
	if _, ok := mac.mutation.ModifyDate(); !ok {
		return &ValidationError{Name: "ModifyDate", err: errors.New(`ent: missing required field "MatrixAttack.ModifyDate"`)}
	}
	return nil
}

func (mac *MatrixAttackCreate) sqlSave(ctx context.Context) (*MatrixAttack, error) {
	_node, _spec := mac.createSpec()
	if err := sqlgraph.CreateNode(ctx, mac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (mac *MatrixAttackCreate) createSpec() (*MatrixAttack, *sqlgraph.CreateSpec) {
	var (
		_node = &MatrixAttack{config: mac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: matrixattack.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: matrixattack.FieldID,
			},
		}
	)
	if value, ok := mac.mutation.IdMatrix(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: matrixattack.FieldIdMatrix,
		})
		_node.IdMatrix = value
	}
	if value, ok := mac.mutation.VendorName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: matrixattack.FieldVendorName,
		})
		_node.VendorName = value
	}
	if value, ok := mac.mutation.NameMatrix(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: matrixattack.FieldNameMatrix,
		})
		_node.NameMatrix = value
	}
	if value, ok := mac.mutation.VersionMatrix(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: matrixattack.FieldVersionMatrix,
		})
		_node.VersionMatrix = value
	}
	if value, ok := mac.mutation.CreateDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: matrixattack.FieldCreateDate,
		})
		_node.CreateDate = value
	}
	if value, ok := mac.mutation.ModifyDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: matrixattack.FieldModifyDate,
		})
		_node.ModifyDate = value
	}
	return _node, _spec
}

// MatrixAttackCreateBulk is the builder for creating many MatrixAttack entities in bulk.
type MatrixAttackCreateBulk struct {
	config
	builders []*MatrixAttackCreate
}

// Save creates the MatrixAttack entities in the database.
func (macb *MatrixAttackCreateBulk) Save(ctx context.Context) ([]*MatrixAttack, error) {
	specs := make([]*sqlgraph.CreateSpec, len(macb.builders))
	nodes := make([]*MatrixAttack, len(macb.builders))
	mutators := make([]Mutator, len(macb.builders))
	for i := range macb.builders {
		func(i int, root context.Context) {
			builder := macb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MatrixAttackMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, macb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, macb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, macb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (macb *MatrixAttackCreateBulk) SaveX(ctx context.Context) []*MatrixAttack {
	v, err := macb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (macb *MatrixAttackCreateBulk) Exec(ctx context.Context) error {
	_, err := macb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (macb *MatrixAttackCreateBulk) ExecX(ctx context.Context) {
	if err := macb.Exec(ctx); err != nil {
		panic(err)
	}
}
