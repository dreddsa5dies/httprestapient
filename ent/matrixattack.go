// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/dreddsa5dies/httprestapient/ent/matrixattack"
)

// MatrixAttack is the model entity for the MatrixAttack schema.
type MatrixAttack struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// IdMatrix holds the value of the "IdMatrix" field.
	IdMatrix string `json:"IdMatrix,omitempty"`
	// VendorName holds the value of the "VendorName" field.
	VendorName string `json:"VendorName,omitempty"`
	// NameMatrix holds the value of the "NameMatrix" field.
	NameMatrix string `json:"NameMatrix,omitempty"`
	// VersionMatrix holds the value of the "VersionMatrix" field.
	VersionMatrix string `json:"VersionMatrix,omitempty"`
	// CreateDate holds the value of the "CreateDate" field.
	CreateDate time.Time `json:"CreateDate,omitempty"`
	// ModifyDate holds the value of the "ModifyDate" field.
	ModifyDate time.Time `json:"ModifyDate,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MatrixAttack) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case matrixattack.FieldID:
			values[i] = new(sql.NullInt64)
		case matrixattack.FieldIdMatrix, matrixattack.FieldVendorName, matrixattack.FieldNameMatrix, matrixattack.FieldVersionMatrix:
			values[i] = new(sql.NullString)
		case matrixattack.FieldCreateDate, matrixattack.FieldModifyDate:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type MatrixAttack", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MatrixAttack fields.
func (ma *MatrixAttack) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case matrixattack.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ma.ID = int(value.Int64)
		case matrixattack.FieldIdMatrix:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field IdMatrix", values[i])
			} else if value.Valid {
				ma.IdMatrix = value.String
			}
		case matrixattack.FieldVendorName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field VendorName", values[i])
			} else if value.Valid {
				ma.VendorName = value.String
			}
		case matrixattack.FieldNameMatrix:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field NameMatrix", values[i])
			} else if value.Valid {
				ma.NameMatrix = value.String
			}
		case matrixattack.FieldVersionMatrix:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field VersionMatrix", values[i])
			} else if value.Valid {
				ma.VersionMatrix = value.String
			}
		case matrixattack.FieldCreateDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field CreateDate", values[i])
			} else if value.Valid {
				ma.CreateDate = value.Time
			}
		case matrixattack.FieldModifyDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field ModifyDate", values[i])
			} else if value.Valid {
				ma.ModifyDate = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this MatrixAttack.
// Note that you need to call MatrixAttack.Unwrap() before calling this method if this MatrixAttack
// was returned from a transaction, and the transaction was committed or rolled back.
func (ma *MatrixAttack) Update() *MatrixAttackUpdateOne {
	return (&MatrixAttackClient{config: ma.config}).UpdateOne(ma)
}

// Unwrap unwraps the MatrixAttack entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ma *MatrixAttack) Unwrap() *MatrixAttack {
	tx, ok := ma.config.driver.(*txDriver)
	if !ok {
		panic("ent: MatrixAttack is not a transactional entity")
	}
	ma.config.driver = tx.drv
	return ma
}

// String implements the fmt.Stringer.
func (ma *MatrixAttack) String() string {
	var builder strings.Builder
	builder.WriteString("MatrixAttack(")
	builder.WriteString(fmt.Sprintf("id=%v", ma.ID))
	builder.WriteString(", IdMatrix=")
	builder.WriteString(ma.IdMatrix)
	builder.WriteString(", VendorName=")
	builder.WriteString(ma.VendorName)
	builder.WriteString(", NameMatrix=")
	builder.WriteString(ma.NameMatrix)
	builder.WriteString(", VersionMatrix=")
	builder.WriteString(ma.VersionMatrix)
	builder.WriteString(", CreateDate=")
	builder.WriteString(ma.CreateDate.Format(time.ANSIC))
	builder.WriteString(", ModifyDate=")
	builder.WriteString(ma.ModifyDate.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// MatrixAttacks is a parsable slice of MatrixAttack.
type MatrixAttacks []*MatrixAttack

func (ma MatrixAttacks) config(cfg config) {
	for _i := range ma {
		ma[_i].config = cfg
	}
}
