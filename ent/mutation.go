// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/dreddsa5dies/httprestapient/ent/matrixattack"
	"github.com/dreddsa5dies/httprestapient/ent/predicate"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeMatrixAttack = "MatrixAttack"
)

// MatrixAttackMutation represents an operation that mutates the MatrixAttack nodes in the graph.
type MatrixAttackMutation struct {
	config
	op             Op
	typ            string
	id             *int
	_IdMatrix      *string
	_VendorName    *string
	_NameMatrix    *string
	_VersionMatrix *string
	_CreateDate    *time.Time
	_ModifyDate    *time.Time
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*MatrixAttack, error)
	predicates     []predicate.MatrixAttack
}

var _ ent.Mutation = (*MatrixAttackMutation)(nil)

// matrixattackOption allows management of the mutation configuration using functional options.
type matrixattackOption func(*MatrixAttackMutation)

// newMatrixAttackMutation creates new mutation for the MatrixAttack entity.
func newMatrixAttackMutation(c config, op Op, opts ...matrixattackOption) *MatrixAttackMutation {
	m := &MatrixAttackMutation{
		config:        c,
		op:            op,
		typ:           TypeMatrixAttack,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMatrixAttackID sets the ID field of the mutation.
func withMatrixAttackID(id int) matrixattackOption {
	return func(m *MatrixAttackMutation) {
		var (
			err   error
			once  sync.Once
			value *MatrixAttack
		)
		m.oldValue = func(ctx context.Context) (*MatrixAttack, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().MatrixAttack.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMatrixAttack sets the old MatrixAttack of the mutation.
func withMatrixAttack(node *MatrixAttack) matrixattackOption {
	return func(m *MatrixAttackMutation) {
		m.oldValue = func(context.Context) (*MatrixAttack, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MatrixAttackMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MatrixAttackMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MatrixAttackMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MatrixAttackMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().MatrixAttack.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIdMatrix sets the "IdMatrix" field.
func (m *MatrixAttackMutation) SetIdMatrix(s string) {
	m._IdMatrix = &s
}

// IdMatrix returns the value of the "IdMatrix" field in the mutation.
func (m *MatrixAttackMutation) IdMatrix() (r string, exists bool) {
	v := m._IdMatrix
	if v == nil {
		return
	}
	return *v, true
}

// OldIdMatrix returns the old "IdMatrix" field's value of the MatrixAttack entity.
// If the MatrixAttack object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MatrixAttackMutation) OldIdMatrix(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIdMatrix is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIdMatrix requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIdMatrix: %w", err)
	}
	return oldValue.IdMatrix, nil
}

// ResetIdMatrix resets all changes to the "IdMatrix" field.
func (m *MatrixAttackMutation) ResetIdMatrix() {
	m._IdMatrix = nil
}

// SetVendorName sets the "VendorName" field.
func (m *MatrixAttackMutation) SetVendorName(s string) {
	m._VendorName = &s
}

// VendorName returns the value of the "VendorName" field in the mutation.
func (m *MatrixAttackMutation) VendorName() (r string, exists bool) {
	v := m._VendorName
	if v == nil {
		return
	}
	return *v, true
}

// OldVendorName returns the old "VendorName" field's value of the MatrixAttack entity.
// If the MatrixAttack object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MatrixAttackMutation) OldVendorName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVendorName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVendorName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVendorName: %w", err)
	}
	return oldValue.VendorName, nil
}

// ResetVendorName resets all changes to the "VendorName" field.
func (m *MatrixAttackMutation) ResetVendorName() {
	m._VendorName = nil
}

// SetNameMatrix sets the "NameMatrix" field.
func (m *MatrixAttackMutation) SetNameMatrix(s string) {
	m._NameMatrix = &s
}

// NameMatrix returns the value of the "NameMatrix" field in the mutation.
func (m *MatrixAttackMutation) NameMatrix() (r string, exists bool) {
	v := m._NameMatrix
	if v == nil {
		return
	}
	return *v, true
}

// OldNameMatrix returns the old "NameMatrix" field's value of the MatrixAttack entity.
// If the MatrixAttack object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MatrixAttackMutation) OldNameMatrix(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNameMatrix is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNameMatrix requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNameMatrix: %w", err)
	}
	return oldValue.NameMatrix, nil
}

// ResetNameMatrix resets all changes to the "NameMatrix" field.
func (m *MatrixAttackMutation) ResetNameMatrix() {
	m._NameMatrix = nil
}

// SetVersionMatrix sets the "VersionMatrix" field.
func (m *MatrixAttackMutation) SetVersionMatrix(s string) {
	m._VersionMatrix = &s
}

// VersionMatrix returns the value of the "VersionMatrix" field in the mutation.
func (m *MatrixAttackMutation) VersionMatrix() (r string, exists bool) {
	v := m._VersionMatrix
	if v == nil {
		return
	}
	return *v, true
}

// OldVersionMatrix returns the old "VersionMatrix" field's value of the MatrixAttack entity.
// If the MatrixAttack object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MatrixAttackMutation) OldVersionMatrix(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVersionMatrix is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVersionMatrix requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVersionMatrix: %w", err)
	}
	return oldValue.VersionMatrix, nil
}

// ResetVersionMatrix resets all changes to the "VersionMatrix" field.
func (m *MatrixAttackMutation) ResetVersionMatrix() {
	m._VersionMatrix = nil
}

// SetCreateDate sets the "CreateDate" field.
func (m *MatrixAttackMutation) SetCreateDate(t time.Time) {
	m._CreateDate = &t
}

// CreateDate returns the value of the "CreateDate" field in the mutation.
func (m *MatrixAttackMutation) CreateDate() (r time.Time, exists bool) {
	v := m._CreateDate
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateDate returns the old "CreateDate" field's value of the MatrixAttack entity.
// If the MatrixAttack object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MatrixAttackMutation) OldCreateDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateDate: %w", err)
	}
	return oldValue.CreateDate, nil
}

// ResetCreateDate resets all changes to the "CreateDate" field.
func (m *MatrixAttackMutation) ResetCreateDate() {
	m._CreateDate = nil
}

// SetModifyDate sets the "ModifyDate" field.
func (m *MatrixAttackMutation) SetModifyDate(t time.Time) {
	m._ModifyDate = &t
}

// ModifyDate returns the value of the "ModifyDate" field in the mutation.
func (m *MatrixAttackMutation) ModifyDate() (r time.Time, exists bool) {
	v := m._ModifyDate
	if v == nil {
		return
	}
	return *v, true
}

// OldModifyDate returns the old "ModifyDate" field's value of the MatrixAttack entity.
// If the MatrixAttack object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MatrixAttackMutation) OldModifyDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldModifyDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldModifyDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModifyDate: %w", err)
	}
	return oldValue.ModifyDate, nil
}

// ResetModifyDate resets all changes to the "ModifyDate" field.
func (m *MatrixAttackMutation) ResetModifyDate() {
	m._ModifyDate = nil
}

// Where appends a list predicates to the MatrixAttackMutation builder.
func (m *MatrixAttackMutation) Where(ps ...predicate.MatrixAttack) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *MatrixAttackMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (MatrixAttack).
func (m *MatrixAttackMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MatrixAttackMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m._IdMatrix != nil {
		fields = append(fields, matrixattack.FieldIdMatrix)
	}
	if m._VendorName != nil {
		fields = append(fields, matrixattack.FieldVendorName)
	}
	if m._NameMatrix != nil {
		fields = append(fields, matrixattack.FieldNameMatrix)
	}
	if m._VersionMatrix != nil {
		fields = append(fields, matrixattack.FieldVersionMatrix)
	}
	if m._CreateDate != nil {
		fields = append(fields, matrixattack.FieldCreateDate)
	}
	if m._ModifyDate != nil {
		fields = append(fields, matrixattack.FieldModifyDate)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MatrixAttackMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case matrixattack.FieldIdMatrix:
		return m.IdMatrix()
	case matrixattack.FieldVendorName:
		return m.VendorName()
	case matrixattack.FieldNameMatrix:
		return m.NameMatrix()
	case matrixattack.FieldVersionMatrix:
		return m.VersionMatrix()
	case matrixattack.FieldCreateDate:
		return m.CreateDate()
	case matrixattack.FieldModifyDate:
		return m.ModifyDate()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MatrixAttackMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case matrixattack.FieldIdMatrix:
		return m.OldIdMatrix(ctx)
	case matrixattack.FieldVendorName:
		return m.OldVendorName(ctx)
	case matrixattack.FieldNameMatrix:
		return m.OldNameMatrix(ctx)
	case matrixattack.FieldVersionMatrix:
		return m.OldVersionMatrix(ctx)
	case matrixattack.FieldCreateDate:
		return m.OldCreateDate(ctx)
	case matrixattack.FieldModifyDate:
		return m.OldModifyDate(ctx)
	}
	return nil, fmt.Errorf("unknown MatrixAttack field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MatrixAttackMutation) SetField(name string, value ent.Value) error {
	switch name {
	case matrixattack.FieldIdMatrix:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIdMatrix(v)
		return nil
	case matrixattack.FieldVendorName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVendorName(v)
		return nil
	case matrixattack.FieldNameMatrix:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNameMatrix(v)
		return nil
	case matrixattack.FieldVersionMatrix:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVersionMatrix(v)
		return nil
	case matrixattack.FieldCreateDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateDate(v)
		return nil
	case matrixattack.FieldModifyDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModifyDate(v)
		return nil
	}
	return fmt.Errorf("unknown MatrixAttack field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MatrixAttackMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MatrixAttackMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MatrixAttackMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown MatrixAttack numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MatrixAttackMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MatrixAttackMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MatrixAttackMutation) ClearField(name string) error {
	return fmt.Errorf("unknown MatrixAttack nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MatrixAttackMutation) ResetField(name string) error {
	switch name {
	case matrixattack.FieldIdMatrix:
		m.ResetIdMatrix()
		return nil
	case matrixattack.FieldVendorName:
		m.ResetVendorName()
		return nil
	case matrixattack.FieldNameMatrix:
		m.ResetNameMatrix()
		return nil
	case matrixattack.FieldVersionMatrix:
		m.ResetVersionMatrix()
		return nil
	case matrixattack.FieldCreateDate:
		m.ResetCreateDate()
		return nil
	case matrixattack.FieldModifyDate:
		m.ResetModifyDate()
		return nil
	}
	return fmt.Errorf("unknown MatrixAttack field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MatrixAttackMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MatrixAttackMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MatrixAttackMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MatrixAttackMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MatrixAttackMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MatrixAttackMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MatrixAttackMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown MatrixAttack unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MatrixAttackMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown MatrixAttack edge %s", name)
}
