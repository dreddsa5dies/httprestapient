// Code generated by entc, DO NOT EDIT.

package matrixattack

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/dreddsa5dies/httprestapient/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.MatrixAttack {
	return predicate.MatrixAttack(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.MatrixAttack {
	return predicate.MatrixAttack(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.MatrixAttack {
	return predicate.MatrixAttack(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.MatrixAttack {
	return predicate.MatrixAttack(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.MatrixAttack {
	return predicate.MatrixAttack(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.MatrixAttack {
	return predicate.MatrixAttack(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.MatrixAttack {
	return predicate.MatrixAttack(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.MatrixAttack {
	return predicate.MatrixAttack(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.MatrixAttack {
	return predicate.MatrixAttack(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// IdMatrix applies equality check predicate on the "IdMatrix" field. It's identical to IdMatrixEQ.
func IdMatrix(v string) predicate.MatrixAttack {
	return predicate.MatrixAttack(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIdMatrix), v))
	})
}

// VendorName applies equality check predicate on the "VendorName" field. It's identical to VendorNameEQ.
func VendorName(v string) predicate.MatrixAttack {
	return predicate.MatrixAttack(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVendorName), v))
	})
}

// NameMatrix applies equality check predicate on the "NameMatrix" field. It's identical to NameMatrixEQ.
func NameMatrix(v string) predicate.MatrixAttack {
	return predicate.MatrixAttack(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNameMatrix), v))
	})
}

// VersionMatrix applies equality check predicate on the "VersionMatrix" field. It's identical to VersionMatrixEQ.
func VersionMatrix(v string) predicate.MatrixAttack {
	return predicate.MatrixAttack(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVersionMatrix), v))
	})
}

// CreateDate applies equality check predicate on the "CreateDate" field. It's identical to CreateDateEQ.
func CreateDate(v time.Time) predicate.MatrixAttack {
	return predicate.MatrixAttack(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateDate), v))
	})
}

// ModifyDate applies equality check predicate on the "ModifyDate" field. It's identical to ModifyDateEQ.
func ModifyDate(v time.Time) predicate.MatrixAttack {
	return predicate.MatrixAttack(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldModifyDate), v))
	})
}

// IdMatrixEQ applies the EQ predicate on the "IdMatrix" field.
func IdMatrixEQ(v string) predicate.MatrixAttack {
	return predicate.MatrixAttack(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIdMatrix), v))
	})
}

// IdMatrixNEQ applies the NEQ predicate on the "IdMatrix" field.
func IdMatrixNEQ(v string) predicate.MatrixAttack {
	return predicate.MatrixAttack(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIdMatrix), v))
	})
}

// IdMatrixIn applies the In predicate on the "IdMatrix" field.
func IdMatrixIn(vs ...string) predicate.MatrixAttack {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MatrixAttack(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIdMatrix), v...))
	})
}

// IdMatrixNotIn applies the NotIn predicate on the "IdMatrix" field.
func IdMatrixNotIn(vs ...string) predicate.MatrixAttack {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MatrixAttack(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIdMatrix), v...))
	})
}

// IdMatrixGT applies the GT predicate on the "IdMatrix" field.
func IdMatrixGT(v string) predicate.MatrixAttack {
	return predicate.MatrixAttack(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIdMatrix), v))
	})
}

// IdMatrixGTE applies the GTE predicate on the "IdMatrix" field.
func IdMatrixGTE(v string) predicate.MatrixAttack {
	return predicate.MatrixAttack(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIdMatrix), v))
	})
}

// IdMatrixLT applies the LT predicate on the "IdMatrix" field.
func IdMatrixLT(v string) predicate.MatrixAttack {
	return predicate.MatrixAttack(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIdMatrix), v))
	})
}

// IdMatrixLTE applies the LTE predicate on the "IdMatrix" field.
func IdMatrixLTE(v string) predicate.MatrixAttack {
	return predicate.MatrixAttack(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIdMatrix), v))
	})
}

// IdMatrixContains applies the Contains predicate on the "IdMatrix" field.
func IdMatrixContains(v string) predicate.MatrixAttack {
	return predicate.MatrixAttack(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIdMatrix), v))
	})
}

// IdMatrixHasPrefix applies the HasPrefix predicate on the "IdMatrix" field.
func IdMatrixHasPrefix(v string) predicate.MatrixAttack {
	return predicate.MatrixAttack(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIdMatrix), v))
	})
}

// IdMatrixHasSuffix applies the HasSuffix predicate on the "IdMatrix" field.
func IdMatrixHasSuffix(v string) predicate.MatrixAttack {
	return predicate.MatrixAttack(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIdMatrix), v))
	})
}

// IdMatrixEqualFold applies the EqualFold predicate on the "IdMatrix" field.
func IdMatrixEqualFold(v string) predicate.MatrixAttack {
	return predicate.MatrixAttack(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIdMatrix), v))
	})
}

// IdMatrixContainsFold applies the ContainsFold predicate on the "IdMatrix" field.
func IdMatrixContainsFold(v string) predicate.MatrixAttack {
	return predicate.MatrixAttack(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIdMatrix), v))
	})
}

// VendorNameEQ applies the EQ predicate on the "VendorName" field.
func VendorNameEQ(v string) predicate.MatrixAttack {
	return predicate.MatrixAttack(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVendorName), v))
	})
}

// VendorNameNEQ applies the NEQ predicate on the "VendorName" field.
func VendorNameNEQ(v string) predicate.MatrixAttack {
	return predicate.MatrixAttack(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVendorName), v))
	})
}

// VendorNameIn applies the In predicate on the "VendorName" field.
func VendorNameIn(vs ...string) predicate.MatrixAttack {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MatrixAttack(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldVendorName), v...))
	})
}

// VendorNameNotIn applies the NotIn predicate on the "VendorName" field.
func VendorNameNotIn(vs ...string) predicate.MatrixAttack {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MatrixAttack(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldVendorName), v...))
	})
}

// VendorNameGT applies the GT predicate on the "VendorName" field.
func VendorNameGT(v string) predicate.MatrixAttack {
	return predicate.MatrixAttack(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVendorName), v))
	})
}

// VendorNameGTE applies the GTE predicate on the "VendorName" field.
func VendorNameGTE(v string) predicate.MatrixAttack {
	return predicate.MatrixAttack(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVendorName), v))
	})
}

// VendorNameLT applies the LT predicate on the "VendorName" field.
func VendorNameLT(v string) predicate.MatrixAttack {
	return predicate.MatrixAttack(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVendorName), v))
	})
}

// VendorNameLTE applies the LTE predicate on the "VendorName" field.
func VendorNameLTE(v string) predicate.MatrixAttack {
	return predicate.MatrixAttack(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVendorName), v))
	})
}

// VendorNameContains applies the Contains predicate on the "VendorName" field.
func VendorNameContains(v string) predicate.MatrixAttack {
	return predicate.MatrixAttack(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldVendorName), v))
	})
}

// VendorNameHasPrefix applies the HasPrefix predicate on the "VendorName" field.
func VendorNameHasPrefix(v string) predicate.MatrixAttack {
	return predicate.MatrixAttack(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldVendorName), v))
	})
}

// VendorNameHasSuffix applies the HasSuffix predicate on the "VendorName" field.
func VendorNameHasSuffix(v string) predicate.MatrixAttack {
	return predicate.MatrixAttack(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldVendorName), v))
	})
}

// VendorNameEqualFold applies the EqualFold predicate on the "VendorName" field.
func VendorNameEqualFold(v string) predicate.MatrixAttack {
	return predicate.MatrixAttack(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldVendorName), v))
	})
}

// VendorNameContainsFold applies the ContainsFold predicate on the "VendorName" field.
func VendorNameContainsFold(v string) predicate.MatrixAttack {
	return predicate.MatrixAttack(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldVendorName), v))
	})
}

// NameMatrixEQ applies the EQ predicate on the "NameMatrix" field.
func NameMatrixEQ(v string) predicate.MatrixAttack {
	return predicate.MatrixAttack(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNameMatrix), v))
	})
}

// NameMatrixNEQ applies the NEQ predicate on the "NameMatrix" field.
func NameMatrixNEQ(v string) predicate.MatrixAttack {
	return predicate.MatrixAttack(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNameMatrix), v))
	})
}

// NameMatrixIn applies the In predicate on the "NameMatrix" field.
func NameMatrixIn(vs ...string) predicate.MatrixAttack {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MatrixAttack(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNameMatrix), v...))
	})
}

// NameMatrixNotIn applies the NotIn predicate on the "NameMatrix" field.
func NameMatrixNotIn(vs ...string) predicate.MatrixAttack {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MatrixAttack(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNameMatrix), v...))
	})
}

// NameMatrixGT applies the GT predicate on the "NameMatrix" field.
func NameMatrixGT(v string) predicate.MatrixAttack {
	return predicate.MatrixAttack(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNameMatrix), v))
	})
}

// NameMatrixGTE applies the GTE predicate on the "NameMatrix" field.
func NameMatrixGTE(v string) predicate.MatrixAttack {
	return predicate.MatrixAttack(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNameMatrix), v))
	})
}

// NameMatrixLT applies the LT predicate on the "NameMatrix" field.
func NameMatrixLT(v string) predicate.MatrixAttack {
	return predicate.MatrixAttack(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNameMatrix), v))
	})
}

// NameMatrixLTE applies the LTE predicate on the "NameMatrix" field.
func NameMatrixLTE(v string) predicate.MatrixAttack {
	return predicate.MatrixAttack(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNameMatrix), v))
	})
}

// NameMatrixContains applies the Contains predicate on the "NameMatrix" field.
func NameMatrixContains(v string) predicate.MatrixAttack {
	return predicate.MatrixAttack(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNameMatrix), v))
	})
}

// NameMatrixHasPrefix applies the HasPrefix predicate on the "NameMatrix" field.
func NameMatrixHasPrefix(v string) predicate.MatrixAttack {
	return predicate.MatrixAttack(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNameMatrix), v))
	})
}

// NameMatrixHasSuffix applies the HasSuffix predicate on the "NameMatrix" field.
func NameMatrixHasSuffix(v string) predicate.MatrixAttack {
	return predicate.MatrixAttack(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNameMatrix), v))
	})
}

// NameMatrixEqualFold applies the EqualFold predicate on the "NameMatrix" field.
func NameMatrixEqualFold(v string) predicate.MatrixAttack {
	return predicate.MatrixAttack(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNameMatrix), v))
	})
}

// NameMatrixContainsFold applies the ContainsFold predicate on the "NameMatrix" field.
func NameMatrixContainsFold(v string) predicate.MatrixAttack {
	return predicate.MatrixAttack(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNameMatrix), v))
	})
}

// VersionMatrixEQ applies the EQ predicate on the "VersionMatrix" field.
func VersionMatrixEQ(v string) predicate.MatrixAttack {
	return predicate.MatrixAttack(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVersionMatrix), v))
	})
}

// VersionMatrixNEQ applies the NEQ predicate on the "VersionMatrix" field.
func VersionMatrixNEQ(v string) predicate.MatrixAttack {
	return predicate.MatrixAttack(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVersionMatrix), v))
	})
}

// VersionMatrixIn applies the In predicate on the "VersionMatrix" field.
func VersionMatrixIn(vs ...string) predicate.MatrixAttack {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MatrixAttack(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldVersionMatrix), v...))
	})
}

// VersionMatrixNotIn applies the NotIn predicate on the "VersionMatrix" field.
func VersionMatrixNotIn(vs ...string) predicate.MatrixAttack {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MatrixAttack(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldVersionMatrix), v...))
	})
}

// VersionMatrixGT applies the GT predicate on the "VersionMatrix" field.
func VersionMatrixGT(v string) predicate.MatrixAttack {
	return predicate.MatrixAttack(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVersionMatrix), v))
	})
}

// VersionMatrixGTE applies the GTE predicate on the "VersionMatrix" field.
func VersionMatrixGTE(v string) predicate.MatrixAttack {
	return predicate.MatrixAttack(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVersionMatrix), v))
	})
}

// VersionMatrixLT applies the LT predicate on the "VersionMatrix" field.
func VersionMatrixLT(v string) predicate.MatrixAttack {
	return predicate.MatrixAttack(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVersionMatrix), v))
	})
}

// VersionMatrixLTE applies the LTE predicate on the "VersionMatrix" field.
func VersionMatrixLTE(v string) predicate.MatrixAttack {
	return predicate.MatrixAttack(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVersionMatrix), v))
	})
}

// VersionMatrixContains applies the Contains predicate on the "VersionMatrix" field.
func VersionMatrixContains(v string) predicate.MatrixAttack {
	return predicate.MatrixAttack(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldVersionMatrix), v))
	})
}

// VersionMatrixHasPrefix applies the HasPrefix predicate on the "VersionMatrix" field.
func VersionMatrixHasPrefix(v string) predicate.MatrixAttack {
	return predicate.MatrixAttack(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldVersionMatrix), v))
	})
}

// VersionMatrixHasSuffix applies the HasSuffix predicate on the "VersionMatrix" field.
func VersionMatrixHasSuffix(v string) predicate.MatrixAttack {
	return predicate.MatrixAttack(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldVersionMatrix), v))
	})
}

// VersionMatrixEqualFold applies the EqualFold predicate on the "VersionMatrix" field.
func VersionMatrixEqualFold(v string) predicate.MatrixAttack {
	return predicate.MatrixAttack(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldVersionMatrix), v))
	})
}

// VersionMatrixContainsFold applies the ContainsFold predicate on the "VersionMatrix" field.
func VersionMatrixContainsFold(v string) predicate.MatrixAttack {
	return predicate.MatrixAttack(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldVersionMatrix), v))
	})
}

// CreateDateEQ applies the EQ predicate on the "CreateDate" field.
func CreateDateEQ(v time.Time) predicate.MatrixAttack {
	return predicate.MatrixAttack(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateDate), v))
	})
}

// CreateDateNEQ applies the NEQ predicate on the "CreateDate" field.
func CreateDateNEQ(v time.Time) predicate.MatrixAttack {
	return predicate.MatrixAttack(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateDate), v))
	})
}

// CreateDateIn applies the In predicate on the "CreateDate" field.
func CreateDateIn(vs ...time.Time) predicate.MatrixAttack {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MatrixAttack(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateDate), v...))
	})
}

// CreateDateNotIn applies the NotIn predicate on the "CreateDate" field.
func CreateDateNotIn(vs ...time.Time) predicate.MatrixAttack {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MatrixAttack(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateDate), v...))
	})
}

// CreateDateGT applies the GT predicate on the "CreateDate" field.
func CreateDateGT(v time.Time) predicate.MatrixAttack {
	return predicate.MatrixAttack(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateDate), v))
	})
}

// CreateDateGTE applies the GTE predicate on the "CreateDate" field.
func CreateDateGTE(v time.Time) predicate.MatrixAttack {
	return predicate.MatrixAttack(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateDate), v))
	})
}

// CreateDateLT applies the LT predicate on the "CreateDate" field.
func CreateDateLT(v time.Time) predicate.MatrixAttack {
	return predicate.MatrixAttack(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateDate), v))
	})
}

// CreateDateLTE applies the LTE predicate on the "CreateDate" field.
func CreateDateLTE(v time.Time) predicate.MatrixAttack {
	return predicate.MatrixAttack(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateDate), v))
	})
}

// ModifyDateEQ applies the EQ predicate on the "ModifyDate" field.
func ModifyDateEQ(v time.Time) predicate.MatrixAttack {
	return predicate.MatrixAttack(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldModifyDate), v))
	})
}

// ModifyDateNEQ applies the NEQ predicate on the "ModifyDate" field.
func ModifyDateNEQ(v time.Time) predicate.MatrixAttack {
	return predicate.MatrixAttack(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldModifyDate), v))
	})
}

// ModifyDateIn applies the In predicate on the "ModifyDate" field.
func ModifyDateIn(vs ...time.Time) predicate.MatrixAttack {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MatrixAttack(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldModifyDate), v...))
	})
}

// ModifyDateNotIn applies the NotIn predicate on the "ModifyDate" field.
func ModifyDateNotIn(vs ...time.Time) predicate.MatrixAttack {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MatrixAttack(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldModifyDate), v...))
	})
}

// ModifyDateGT applies the GT predicate on the "ModifyDate" field.
func ModifyDateGT(v time.Time) predicate.MatrixAttack {
	return predicate.MatrixAttack(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldModifyDate), v))
	})
}

// ModifyDateGTE applies the GTE predicate on the "ModifyDate" field.
func ModifyDateGTE(v time.Time) predicate.MatrixAttack {
	return predicate.MatrixAttack(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldModifyDate), v))
	})
}

// ModifyDateLT applies the LT predicate on the "ModifyDate" field.
func ModifyDateLT(v time.Time) predicate.MatrixAttack {
	return predicate.MatrixAttack(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldModifyDate), v))
	})
}

// ModifyDateLTE applies the LTE predicate on the "ModifyDate" field.
func ModifyDateLTE(v time.Time) predicate.MatrixAttack {
	return predicate.MatrixAttack(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldModifyDate), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MatrixAttack) predicate.MatrixAttack {
	return predicate.MatrixAttack(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MatrixAttack) predicate.MatrixAttack {
	return predicate.MatrixAttack(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MatrixAttack) predicate.MatrixAttack {
	return predicate.MatrixAttack(func(s *sql.Selector) {
		p(s.Not())
	})
}
